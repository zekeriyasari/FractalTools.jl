var documenterSearchIndex = {"docs":
[{"location":"manual/integration/one_dimensional_hidden_integration/#One-Dimensional-Fractal-Integration","page":"-","title":"One Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/one_dimensional_hidden_integration/#Fractal-Interpolation-Coefficients","page":"-","title":"Fractal Interpolation Coefficients","text":"","category":"section"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"Let N  2 be natural number. Let x_0  x_1  ldots  x_N be real numbers. Let I = x_0 x_N, and I_i = x_i x_i + 1 for i = 0 ldots N - 1 be the subintervals of I. Consider homeomorphisms L_i(x) I mapsto I_i such that","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nL_i(x_j) - L_i(x_k)  leq s_i x_j - x_k \nL_i(x_0) = x_i quad L_i(x_N) = x_i + 1  \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"for all x_j x_k in I  0 leq s_i  1. Consider N continuous transformations F_i  I times mathbbR mapsto mathbbR such that ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nF_i(x_j y_j) - F_i(x_j y_k) leq r_i y_j - y_k \nF_i(x_0 y_0) = y_i quad F_i(x_N y_N) = y_i + 1 \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"for x_j in I  y_j y_k in mathbbR  0 leq r_i  1. Let w_i  I times mathbbR mapsto I_i times mathbbR such that","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"w_i(x y) = (L_i(x) F_i(x y))  i = 1 ldots N","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"The followings hold for the IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N :","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"It has a unique attractor G which is the graph of a continuous function fImapsto mathbbR satisfying f(x_i) = y_i for i = 0 ldots N.\nLet (mathcalF d) be a complete metric space such that mathcalF =  tildef in mathcalC^1 (I) tildef(x_0) = y_0  tildef(x_N) = y_N  with the metric d(tildef_1 tildef_2) = max tildef_1(x) - tildef_2(x)  x in I . Let M mathcalF mapsto mathcalF be a mapping defined by (Mtildef)(x) = F_i(L_i^-1(x) tildef(L_i^-1(x))  x in I for i = 0 ldots N. Then, M has unique fixed point f such that f = lim_n mapsto infty M^n(tildef) for any tildef in mathcalF and f satisfies the condition given above.","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"The function f whose graph is the attractor of the IFS mathcalI and which is the fixed point of the mapping M given in Theorem above is called a fractal interpolation function (FIF).","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/#One-Dimensional-Fractal-Integration-2","page":"-","title":"One Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"It is also possible to calculate the definite integrals of the fractal interpolation functions over the interpolation domain. The crucial result here is that the value of the integrals does not depend on the explicit formula of the interpolation function, but depends on the coefficients of the transformations that used to construct the interpolant. ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"We first start with","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n  I =  int_I f(x)dx = int_x_0^x_N f(x) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"where f is the fractal interpolation function, i.e. the interpolant. Since f(x) is the fixed point of Tf, we have f(x) = Tf(x). Then,","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_x_0^x_N Tf(x) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"Since Tf(x) = F_n(L_n^-1(x) f(L_n^-1)), where, in case one dimensional integration, ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n    L_n(x) = alpha_1^n x + beta_1^n \n    F_n(x y) = alpha_2^n x + alpha_3^n y + beta_2^n \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"we have,","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_x_0^x_N left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"We can divide integral I into multiple subintervasl I_n,","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n    I  \n    = sum_n=1^N int_x_n-1^x_n left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\n    = sum_n=1^N int_I_n left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"To make the right hand side of the above equation look like the left hand side, we need to apply a suitable transformation. That is, we need to transform the integral int_I_n over the subinterval I_n to the interpolation interval I. ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"note: Note\nConsider the transformation L shown in the figure below where Omega_n subset mathbbR^2 and Omega subset mathbbR^2.  (Image: 1d_transformations)We have the following equality for the definite integrals.beginaligned\n    I\n    = int_Omega_n h(x) dx\n    = int_Omega h(L(barx)) J_Ld barx \nendalignedwhere J_L is the determinant of the Jacobian of the transformation L.","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"Using the note given above, we can write ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\n    I = sum_n=1^N int_I left( alpha_2^n barx + alpha_3^n f(barx) + beta_2^n right) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N int_I left( alpha_3^n f(barx) right) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N left( alpha_3^n right) int_I f(barx) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N left( alpha_3^n right) I \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"from which we have, ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"    I = dfracK_11-K_2\n   ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"where ","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"    beginaligned\n    K_1 = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx \n    K_2 = 1 - sum_n=1^N alpha_3^n \n    endaligned","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"It worths pointing out that the value I of the integration depends on just the coefficients of the transformations, not on the explicit expression of the interpolation function f.","category":"page"},{"location":"manual/integration/one_dimensional_hidden_integration/#Two-Dimensional-Fractal-Integration","page":"-","title":"Two Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/one_dimensional_hidden_integration/","page":"-","title":"-","text":"<center>\n    <img src=\"../../assests/transformation.svg\" alt=\"model\" width=\"75%\"/>\n</center>","category":"page"},{"location":"manual/integration/one_dimensional_integration/#One-Dimensional-Fractal-Integration","page":"-","title":"One Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/one_dimensional_integration/#Fractal-Interpolation-Coefficients","page":"-","title":"Fractal Interpolation Coefficients","text":"","category":"section"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"Let N  2 be natural number. Let x_0  x_1  ldots  x_N be real numbers. Let I = x_0 x_N, and I_i = x_i x_i + 1 for i = 0 ldots N - 1 be the subintervals of I. Consider homeomorphisms L_i(x) I mapsto I_i such that","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\nL_i(x_j) - L_i(x_k)  leq s_i x_j - x_k \nL_i(x_0) = x_i quad L_i(x_N) = x_i + 1  \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"for all x_j x_k in I  0 leq s_i  1. Consider N continuous transformations F_i  I times mathbbR mapsto mathbbR such that ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\nF_i(x_j y_j) - F_i(x_j y_k) leq r_i y_j - y_k \nF_i(x_0 y_0) = y_i quad F_i(x_N y_N) = y_i + 1 \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"for x_j in I  y_j y_k in mathbbR  0 leq r_i  1. Let w_i  I times mathbbR mapsto I_i times mathbbR such that","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"w_i(x y) = (L_i(x) F_i(x y))  i = 1 ldots N","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"The followings hold for the IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N :","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"It has a unique attractor G which is the graph of a continuous function fImapsto mathbbR satisfying f(x_i) = y_i for i = 0 ldots N.\nLet (mathcalF d) be a complete metric space such that mathcalF =  tildef in mathcalC^1 (I) tildef(x_0) = y_0  tildef(x_N) = y_N  with the metric d(tildef_1 tildef_2) = max tildef_1(x) - tildef_2(x)  x in I . Let M mathcalF mapsto mathcalF be a mapping defined by (Mtildef)(x) = F_i(L_i^-1(x) tildef(L_i^-1(x))  x in I for i = 0 ldots N. Then, M has unique fixed point f such that f = lim_n mapsto infty M^n(tildef) for any tildef in mathcalF and f satisfies the condition given above.","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"The function f whose graph is the attractor of the IFS mathcalI and which is the fixed point of the mapping M given in Theorem above is called a fractal interpolation function (FIF).","category":"page"},{"location":"manual/integration/one_dimensional_integration/#One-Dimensional-Fractal-Integration-2","page":"-","title":"One Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"It is also possible to calculate the definite integrals of the fractal interpolation functions over the interpolation domain. The crucial result here is that the value of the integrals does not depend on the explicit formula of the interpolation function, but depends on the coefficients of the transformations that used to construct the interpolant. ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"We first start with","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n  I =  int_I f(x)dx = int_x_0^x_N f(x) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"where f is the fractal interpolation function, i.e. the interpolant. Since f(x) is the fixed point of Tf, we have f(x) = Tf(x). Then,","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_x_0^x_N Tf(x) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"Since Tf(x) = F_n(L_n^-1(x) f(L_n^-1)), where, in case one dimensional integration, ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    L_n(x) = alpha_1^n x + beta_1^n \n    F_n(x y) = alpha_2^n x + alpha_3^n y + beta_2^n \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"we have,","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_x_0^x_N left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"We can divide integral I into multiple subintervasl I_n,","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I  \n    = sum_n=1^N int_x_n-1^x_n left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\n    = sum_n=1^N int_I_n left( alpha_2^n L_n^-1(x) + alpha_3^n f(L_n^-1(x)) + beta_2^n right) dx\nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"To make the right hand side of the above equation look like the left hand side, we need to apply a suitable transformation. That is, we need to transform the integral int_I_n over the subinterval I_n to the interpolation interval I. ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"note: Note\nConsider the transformation L shown in the figure below where Omega_n subset mathbbR^2 and Omega subset mathbbR^2.  (Image: 1d_transformations)We have the following equality for the definite integrals.beginaligned\n    I\n    = int_Omega_n h(x) dx\n    = int_Omega h(L(barx)) J_Ld barx \nendalignedwhere J_L is the determinant of the Jacobian of the transformation L.","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"Using the note given above, we can write ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I = sum_n=1^N int_I left( alpha_2^n barx + alpha_3^n f(barx) + beta_2^n right) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N int_I left( alpha_3^n f(barx) right) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N left( alpha_3^n right) int_I f(barx) d barx \n        = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx  +\n        sum_n=1^N left( alpha_3^n right) I \nendaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"from which we have, ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"    I = dfracK_11-K_2\n   ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"where ","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"    beginaligned\n    K_1 = sum_n=1^N int_I left( alpha_2^n barx + beta_2^n right) d barx \n    K_2 = 1 - sum_n=1^N alpha_3^n \n    endaligned","category":"page"},{"location":"manual/integration/one_dimensional_integration/","page":"-","title":"-","text":"It worths pointing out that the value I of the integration depends on just the coefficients of the transformations, not on the explicit expression of the interpolation function f.","category":"page"},{"location":"manual/integration/two_dimensional_integration/#Two-Dimensional-Fractal-Integration","page":"-","title":"Two Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"<center>\n    <img src=\"../../assests/transformation.svg\" alt=\"model\" width=\"75%\"/>\n</center>","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"    beginaligned\n    w_n\n    beginbmatrix\n    x \n    y \n    z \n    endbmatrix\n    = \n    beginbmatrix\n    alpha_1^n  alpha_2^n  0 \n    alpha_3^n  alpha_4^n  0 \n    alpha_5^n  alpha_6^n  alpha_7^n\n    endbmatrix\n    beginbmatrix\n    x  y  z\n    endbmatrix + beginbmatrix\n    beta_1^n  beta_2^n  beta_3^n\n    endbmatrix \n      n = 1 ldots K\n\n    endaligned\n","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"where L_n  Omega mapsto Omega^n","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"We first start with","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n  I =  int_Omega f(xy)dx dy = int_Omega f(xy)dx dy\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"where f is the fractal interpolation function, i.e. the interpolant. Since f(xy) is the fixed point of Tf, we have f(xy) = Tf(xy). Then,","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_Omega Tf(xy) dx dy\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"Since Tf(xy) = F_n(L_n^-1(xy) f(L_n^-1(xy))), where, in case two dimensional integration, ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    L_n(xy) = \n    beginbmatrix\n    alpha_1^n  alpha_2^n \n    alpha_3^n  alpha_4^n \n    endbmatrix\n    beginbmatrix\n    x  y \n    endbmatrix + beginbmatrix\n    beta_1^n  beta_2^n \n    endbmatrix \n    F_n(x y z) = alpha_5^n x + alpha_6^n y + alpha_7^n z  beta_3^n \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"We have,","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"Tf(xy) = beginbmatrix\nalpha_5^n  alpha_6^n\nendbmatrix L_n^-1(xy) + alpha_7^n f(L_n^-1(xy))) + beta_3^n","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"We can divide integral I into multiple subintervasl I_n,","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I\n    = int_Omega F_n(L_n^-1(xy) f(L_n^-1(xy))) dx dy \n    = sum_n=1^K int_Omega_n F_n(L_n^-1(xy) f(L_n^-1(xy))) dx dy \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"To make the right hand side of the above equation look like the left hand side, we need to apply a suitable transformation. That is, we need to transform the integral int_I_n over the subinterval I_n to the interpolation interval I. ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"ADD FIGURE","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"note: Note\nConsider the transformation L shown in the figure below where Omega_n subset mathbbR^2 and Omega subset mathbbR^2.  (Image: 1d_transformations)We have the following equality for the definite integrals.beginaligned\n    I =  int_Omega_n h(X) dX = int_Omega h(L(barX)) J_L dbarX \n\nendalignedwhere J_L is the determinant of the Jacobian of the transformation L.","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"Using the note given above, we can write ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n  int_Omega_n h(X) dX = int_Omega h(L(barX)) J_L dbarX \n  = sum_n=1^K int_Omega  F_n(L_n^-1(L_n(barX)) f(L_n^-1(L_n(barX)))) J_L dbarX \n  = sum_n=1^K int_Omega  F_n(barX f(barX)) J_L dbarX\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"we can write, ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n    I = sum_n=1^K int_Omega (beginbmatrix\nalpha_5^n  alpha_6^n\nendbmatrix barX + alpha_7^n f(barX) + beta_3^n) J_L dbarX \n= sum_n=1^K int_Omega (beginbmatrix\nalpha_5^n  alpha_6^n\nendbmatrix barX + beta_3^n) J_L dbarX + sum_n=1^K int_Omega alpha_7^n f(barX) J_L dbarX \n= sum_n=1^K int_Omega ( alpha_5^n x + alpha_6^n y + beta_3^n) J_L dx dy + sum_n=1^K int_Omega alpha_7^n f(xy ) J_L dx dy \n= sum_n=1^K int_Omega ( alpha_5^n x + alpha_6^n y + beta_3^n) J_L dx dy +  int_Omega  f(xy ) dx dysum_n=1^Kalpha_7^n J_L\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"We have,","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"I = fracgamma1 - rho","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"where ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"gamma = sum_n=1^K int_Omega ( alpha_5^n x + alpha_6^n y + beta_3^n) J_L dx dy","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"and ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"rho = sum_n=1^Kalpha_7^n J_L","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"note: Note\nJ_Lis the determinant of the Jacobian of the transformation L.beginaligned\n    L_n(xy) = \n    beginbmatrix\n    alpha_1^n  alpha_2^n \n    alpha_3^n  alpha_4^n \n    endbmatrix\n    beginbmatrix\n    x  y \n    endbmatrix + beginbmatrix\n    beta_1^n  beta_2^n \n    endbmatrix \nendalignedand beginaligned\n    J_L_n(xy) = \n    beginbmatrix\n    alpha_1^n  alpha_2^n \n    alpha_3^n  alpha_4^n \n    endbmatrix\n    beginbmatrix\n    x  y \n    endbmatrix + beginbmatrix\n    beta_1^n  beta_2^n \n    endbmatrix  \n    J_L_n = alpha_1^n alpha_4^n - alpha_2^n alpha_3^n \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"note: Note\nJ_Uis the determinant of the Jacobian of the transformation U.beginaligned\n    U(barX) = \n    beginbmatrix\n    a_1^n  a_2^n \n    a_3^n  a_4^n \n    endbmatrix\n    beginbmatrix\n    x  y \n    endbmatrix + beginbmatrix\n    b_1^n  b_2^n \n    endbmatrix \n    J_U = a_1^n a_4^n - a_2^n a_3^n\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"Calculating the first part of the integral, gamma; ","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n I_1 = int_Omega ( alpha_5^n x + alpha_6^n y + beta_3^n) J_L dx dy \n = int_Omega^n  ( alpha_5^n a_1 barx + a_2bary+b_1 + alpha_6^n a_3 barx + a_4bary+b_2 + beta_3^n) J_U dbarx dbary \n endaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"So;","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n I_1 = int_Omega^n  ( alpha_5^n a_1 barx + a_2bary+b_1 + alpha_6^n a_3 barx + a_4bary+b_2 + beta_3^n) J_U dbarx dbary \n =  alpha_5^n int_Omega^n  a_1 barx + a_2bary+b_1J_U dbarx dbary + alpha_6^n int_Omega^n a_3 barx + a_4bary+b_2J_U dbarx dbary + int_Omega^n beta_3^n)J_U  dbarx dbary \n  =  alpha_5^n I_11J_U + alpha_6^n I_12J_U + int_Omega^n beta_3^n)J_U  dbarx dbary \n endaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"where","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n I_11 = int_0^1 int_0^-barx+1 a_1 barx + a_2 bary+b_1  dbary dbarx \n = int_0^1 a_1 barx bary + a_2 fracbary2 + b1 bary _0^-barx+1 dbarx \n = int_0^1 a_1 (-barx+1) barx + a_2 frac12(-barx+1)^2 + b_1(-barx+1)dbarx \n = a_1-fracbarx^33+fracbarx^22 + fraca_22fracbarx^33 - barx^2 + barx + b_1 -fracbarx^22+barx _0^1 \n = a_1 frac-13+frac12 + fraca_22frac13 + b_1frac12 \n = frac16a_1 + a_2 + 3b_1\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"and similarly,","category":"page"},{"location":"manual/integration/two_dimensional_integration/","page":"-","title":"-","text":"beginaligned\n I_12 =  frac16a_3 + a_4 + 3b_2\nendaligned","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"This page includes notes about one dimensional fractal interpolation and one dimensional hidden fractal interpolation.","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/#Preliminaries","page":"-","title":"Preliminaries","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Let N  2 be natural number. Let x_0  x_1  ldots  x_N be real numbers. Let I = x_0 x_N, and I_i = x_i x_i + 1 for i = 0 ldots N - 1 be the subintervals of I. Consider homeomorphisms L_i(x) I mapsto I_i such that","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginaligned\nL_i(x_j) - L_i(x_k)  leq s_i x_j - x_k \nL_i(x_0) = x_i quad L_i(x_N) = x_i + 1  \nendaligned","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"for all x_j x_k in I  0 leq s_i  1. Consider N continuous transformations F_i  I times mathbbR mapsto mathbbR such that ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginaligned\nF_i(x_j y_j) - F_i(x_j y_k) leq r_i y_j - y_k \nF_i(x_0 y_0) = y_i quad F_i(x_N y_N) = y_i + 1 \nendaligned","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"for x_j in I  y_j y_k in mathbbR  0 leq r_i  1. Let w_i  I times mathbbR mapsto I_i times mathbbR such that","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"w_i(x y) = (L_i(x) F_i(x y))  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Then following is the main theorem of fractal interpolation functions put forward by Barnsley.","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"The followings hold for the IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N :","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"It has a unique attractor G which is the graph of a continuous function fImapsto mathbbR satisfying f(x_i) = y_i for i = 0 ldots N.\nLet (mathcalF d) be a complete metric space such that mathcalF =  tildef in mathcalC^1 (I) tildef(x_0) = y_0  tildef(x_N) = y_N  with the metric d(tildef_1 tildef_2) = max tildef_1(x) - tildef_2(x)  x in I . Let M mathcalF mapsto mathcalF be a mapping defined by (Mtildef)(x) = F_i(L_i^-1(x) tildef(L_i^-1(x))  x in I for i = 0 ldots N. Then, M has unique fixed point f such that f = lim_n mapsto infty M^n(tildef) for any tildef in mathcalF and f satisfies the condition given above.","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"The function f whose graph is the attractor of the IFS mathcalI and which is the fixed point of the mapping M given in Theorem above is called a fractal interpolation function (FIF).","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/#D-Fractal-Interpolation","page":"-","title":"1D Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Consider the affine IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N  with,","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginaligned\nL_i(x) = a_i x + e_i \nF_i(x y) = c_i x + d_i y + f_i\nendaligned\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"where d_i  i = 1 ldots N are free parameters, also called as vertical scaling factors, such that d_i  1. ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Given the vertical scaling factors d_i  i = 1 ldots N, the coefficients a_i and e_i of the affine transformation L_i, and c_i and f_i of the affine transformation F_i are determined to satisfy the constraints, respectively.","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"From the boundary conditions, we have","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\na_i \ne_i\nendbmatrix = \n\nbeginbmatrix\nx_i \nx_i + 1\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\na_i \ne_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nx_i  \nx_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Similarly, we have, ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1  \nendbmatrix\n\nbeginbmatrix\nc_i \nf_i\nendbmatrix = \n\nbeginbmatrix\ny_i - d_i y_0  \ny_i + 1 - d_i y_N\nendbmatrix\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\nc_i \nf_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\ny_i - d_i y_0  \ny_i + 1 - d_i y_N\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"[1]: mathcalC(bmX) denotes the set of continuous functions defined over the set bmX.","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/#D-Hidden-Fractal-Interpolation","page":"-","title":"1D Hidden Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Consider the following IFS, ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx  \ny \nz\nendbmatrix\nright) = \n\nbeginbmatrix\na_i  0  0 \nc_i  d_i  h_i \nk_i  l_i  m_i \nendbmatrix\n\nbeginbmatrix\nx  \ny \nz\nendbmatrix\n\n+ \n\nbeginbmatrix\ne_i  \nf_i \ng_i\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"We assume that the following boundary conditions are satisfied. ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx_0  \ny_0 \nz_0\nendbmatrix\nright) = \nbeginbmatrix\nx_i  \ny_i \nz_i\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"and ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx_N  \ny_N \nz_N\nendbmatrix\nright) = \n\nbeginbmatrix\nx_i + 1  \ny_i + 1 \nz_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Given the free parameters  z_i d_i h_i l_i m_i, which are called as hidden variables, the remaining parameter a_i c_i k_i e_i f_i g_i can be calculated. ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Using the boundary conditions, we can write ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\na_i \ne_i\nendbmatrix = \n\nbeginbmatrix\nx_i \nx_i + 1\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\na_i \ne_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nx_i  \nx_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Similarly, we have ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\nc_i \nf_i\nendbmatrix = \n\nbeginbmatrix\ny_i - d_i y_0 - h_i z_0  \ny_i + 1 - d_i y_N - h_i z_N\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\nc_i \nf_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\ny_i - d_i y_0 - h_i z_0 \ny_i + 1 - d_i y_N - h_i z_N\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Again, ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\nk_i \ng_i\nendbmatrix = \n\nbeginbmatrix\nz_i - d_i y_0 - h_i z_0  \nz_i + 1 - d_i y_N - h_i z_N\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\nk_i \ng_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nz_i - d_i y_0 - h_i z_0 \nz_i + 1 - d_i y_N - h_i z_N\nendbmatrix","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/#Two-Dimensional-Fractal-Interpolation","page":"-","title":"Two Dimensional Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"To generalize the concepts given in the previous section for FIFs to the FISs, consider that Omega = tildeP_j = (tildex_j tildey_j)  j = 1 2 3 is a triangular domain in the plane as shown in Fig. \\ref{fig: triangulation}. Let P = P_i = (x_i y_i)  i = 1 ldots N be given points in the plane scattered over Omega containing the points tildeP_j  j = 1 2 3. A triangulation T(Omega) of Omega over the points P is given with the set, \\begin{equation} T(\\Omega) = { \\Omega^i = {Pj^i} : Pj^i \\in P, \\; j = 1, 2, 3, \\;  i  = 1, \\ldots, K } \\label{eq: triangulation} \\end{equation} Note that T(Omega) consists of non-degenerate triangles such that Omega^i cap Omega^j = emptyset  i neq j and Omega = cup_i  = 1^K Omega^i.","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"<center>\n    <img src=\"../../assests/triangulation.svg\" alt=\"model\" width=\"30%\"/>\n</center>","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Consider that each P_i = (x_i y_i) in P is associated with z_i in mathbbR. An interpolation function–also called interpolant, corresponding to the data set (x_i y_i z_i)  i = 1 ldots N  is a continuous function f Omega mapsto mathbbR such that f(x_i y_i) = z_i. The answer to the problem of constructing the interpolation function f is in two folds:","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Construction of an IFS mathcalI = Omega times mathbbR w_i  i = 1 ldots K  whose attractor is the graphG of the function f satisfying the interpolation points, i.e.f(x_i y_i) = z_i  i = 1 ldots N. \nConstruction of a contraction mapping M mathcalF mapstomathcalF where mathcalF = tildef in mathcalC(Omega)  tildef(tildex_j tildey_j) = tildez_j  such that the fixed point f of the mapping M satisfies the interpolation points, i.e. f(x_i y_i) = z_i  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/#Construction-of-the-IFS-\\mathcal{I}","page":"-","title":"Construction of the IFS mathcalI","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Addressing to the first step, we put forward the following IFS I =  Omega times mathbbR w_i  i = 1 ldots K  with affine transformations w_i,","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"    beginaligned\n     w_i(x y z) = (L_i(x y) F_i(x y z)) \n    =beginbmatrix\n    alpha_1^i  alpha_2^i  0 \n    alpha_3^i  alpha_4^i  0 \n    alpha_5^i  alpha_6^i  alpha_7^i\n    endbmatrix\n    beginbmatrix\n    x  y  z\n    endbmatrix + beginbmatrix\n    beta_1^i  beta_2^i  beta_3^i\n    endbmatrix \n      i = 1 ldots K\n\n    endaligned\n","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"where L_i  Omega mapsto Omega^i","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"    L_i(x y) = beginbmatrix\n    alpha_1^i  alpha_2^i  alpha_3^i  alpha_4^i\n    endbmatrix beginbmatrix\n    x  y\n    endbmatrix + beginbmatrix\n    beta_1^i  beta_2^i\n    endbmatrix","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"are contraction mappings for the z axis satisfying the boundary conditions,","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"F_i(tildex_j tildey_j tildez_j) = z_j^i  j = 1 2 3","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"where alpha_7^i are arbitrary contractivity factors satisfying alpha_7^i  1  i = 1 ldots K, also called as vertical scaling factors.","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Given the vertical scaling factors alpha_7^i  i = 1 ldots K, the coefficients alpha_k^i  k = 1  ldots 6  i = 1 ldots K can be found using the boundary conditions in (\\ref{eq: plane boundary conditions}) and (\\ref{eq: z values boundary conditons}) which results in following system of equations,","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginaligned\nalpha_1^i tildex_j + alpha_2^i tildey_j + beta_1^i = x_j^i \nalpha_3^i tildex_j + alpha_4^i tildey_j + beta_2^i = y_j^i \nalpha_5^i tildex_j + alpha_6^i tildey_j + beta_3^i = z_j^i - alpha_7^i tildez_j \nendaligned","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"for i = 1 ldots K  j = 1 2 3. This system can be rewritten in block diagonal matrix equation system,","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginbmatrix\nbmP  bm0  ldots  bm0 \nbm0  bmP  ldots  bm0 \nvdots  vdots  ddots  vdots \nbm0  bm0  ldots  bmP \nendbmatrix\nbeginbmatrix\nbmr_1  bmr_2  bmr_3\nendbmatrix = beginbmatrix\nbmc_1  bmc_2  bmc_3\nendbmatrix","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"where","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"beginaligned\nbmP = \nbeginbmatrix\ntildex_1  tildey_1  1  \ntildex_2  tildey_2  1  \ntildex_3  tildey_3  1  \nendbmatrix\nbmr_1 = bmr_1^1 ldots bmr_1^i ldots bmr_1^K  bmr_1^i = alpha_1^i alpha_2^i beta_1^i \nbmr_2 = bmr_2^1 ldots bmr_2^i ldots bmr_2^K  bmr_2^i = alpha_3^i alpha_4^i beta_2^i  \nbmr_3 = bmr_3^1 ldots bmr_3^i ldots bmr_3^K  bmr_3^i = alpha_5^i alpha_6^i beta_3^i \nbmc_1 = bmc_1^1 ldots bmc_1^i ldots bmc_1^K  bmc_1^i = x_1^i x_2^i x_3^i \nbmc_2 = bmc_2^1 ldots bmc_2^i ldots bmc_2^K  bmc_2^i = y_1^i y_2^i y_3^i \nbmc_3 = bmc_3^1 ldots bmc_3^i ldots bmc_3^K  bmc_3^i = z_1^i z_2^i z_3^i - alpha_7^i tildez_1^i tildez_2^i tildez_3^i\nendaligned","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"We  have uncoupled system of equations,","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"bmP bmr_j^i = bmc_j^i  j = 1 2 3  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Since the points tildeP_j  j = 1 2 3 forms a non-degenerate triangular region Omega, bmP^-1 exists and can be solved for the coefficients of the IFS mathcalI which gives, ","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"bmr_j^i = bmP^-1 bmc_j^i  j = 1 2 3  i = 1 ldots K","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/#Construction-of-the-mapping-M","page":"-","title":"Construction of the mapping M","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"Inspired by the reasoning given in Theorem 1, we propose the following conjecture for the second part of the problem.","category":"page"},{"location":"manual/interpolation/two_dimensional_hidden_interpolation/","page":"-","title":"-","text":"note: Note\nConsider the transformation L shown in the figure below where Omega_n and Omega subset mathbbR^2 and the IFS mathcalI in (\\ref{eq: IFS}), let (mathcalF d) be a complete metric space such that\t","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"This page includes notes about one dimensional fractal interpolation and one dimensional hidden fractal interpolation.","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/#Preliminaries","page":"-","title":"Preliminaries","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Let N  2 be natural number. Let x_0  x_1  ldots  x_N be real numbers. Let I = x_0 x_N, and I_i = x_i x_i + 1 for i = 0 ldots N - 1 be the subintervals of I. Consider homeomorphisms L_i(x) I mapsto I_i such that","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginaligned\nL_i(x_j) - L_i(x_k)  leq s_i x_j - x_k \nL_i(x_0) = x_i quad L_i(x_N) = x_i + 1  \nendaligned","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"for all x_j x_k in I  0 leq s_i  1. Consider N continuous transformations F_i  I times mathbbR mapsto mathbbR such that ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginaligned\nF_i(x_j y_j) - F_i(x_j y_k) leq r_i y_j - y_k \nF_i(x_0 y_0) = y_i quad F_i(x_N y_N) = y_i + 1 \nendaligned","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"for x_j in I  y_j y_k in mathbbR  0 leq r_i  1. Let w_i  I times mathbbR mapsto I_i times mathbbR such that","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"w_i(x y) = (L_i(x) F_i(x y))  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Then following is the main theorem of fractal interpolation functions put forward by Barnsley.","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"The followings hold for the IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N :","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"It has a unique attractor G which is the graph of a continuous function fImapsto mathbbR satisfying f(x_i) = y_i for i = 0 ldots N.\nLet (mathcalF d) be a complete metric space such that mathcalF =  tildef in mathcalC^1 (I) tildef(x_0) = y_0  tildef(x_N) = y_N  with the metric d(tildef_1 tildef_2) = max tildef_1(x) - tildef_2(x)  x in I . Let M mathcalF mapsto mathcalF be a mapping defined by (Mtildef)(x) = F_i(L_i^-1(x) tildef(L_i^-1(x))  x in I for i = 0 ldots N. Then, M has unique fixed point f such that f = lim_n mapsto infty M^n(tildef) for any tildef in mathcalF and f satisfies the condition given above.","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"The function f whose graph is the attractor of the IFS mathcalI and which is the fixed point of the mapping M given in Theorem above is called a fractal interpolation function (FIF).","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/#D-Fractal-Interpolation","page":"-","title":"1D Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Consider the affine IFS mathcalI =  I times mathbbR w_i  i = 1 ldots N  with,","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginaligned\nL_i(x) = a_i x + e_i \nF_i(x y) = c_i x + d_i y + f_i\nendaligned\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"where d_i  i = 1 ldots N are free parameters, also called as vertical scaling factors, such that d_i  1. ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Given the vertical scaling factors d_i  i = 1 ldots N, the coefficients a_i and e_i of the affine transformation L_i, and c_i and f_i of the affine transformation F_i are determined to satisfy the constraints, respectively.","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"From the boundary conditions, we have","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\na_i \ne_i\nendbmatrix = \n\nbeginbmatrix\nx_i \nx_i + 1\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\na_i \ne_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nx_i  \nx_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Similarly, we have, ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1  \nendbmatrix\n\nbeginbmatrix\nc_i \nf_i\nendbmatrix = \n\nbeginbmatrix\ny_i - d_i y_0  \ny_i + 1 - d_i y_N\nendbmatrix\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\nc_i \nf_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\ny_i - d_i y_0  \ny_i + 1 - d_i y_N\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"[1]: mathcalC(bmX) denotes the set of continuous functions defined over the set bmX.","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/#D-Hidden-Fractal-Interpolation","page":"-","title":"1D Hidden Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Consider the following IFS, ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx  \ny \nz\nendbmatrix\nright) = \n\nbeginbmatrix\na_i  0  0 \nc_i  d_i  h_i \nk_i  l_i  m_i \nendbmatrix\n\nbeginbmatrix\nx  \ny \nz\nendbmatrix\n\n+ \n\nbeginbmatrix\ne_i  \nf_i \ng_i\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"We assume that the following boundary conditions are satisfied. ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx_0  \ny_0 \nz_0\nendbmatrix\nright) = \nbeginbmatrix\nx_i  \ny_i \nz_i\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"and ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"w_i = left(\nbeginbmatrix\nx_N  \ny_N \nz_N\nendbmatrix\nright) = \n\nbeginbmatrix\nx_i + 1  \ny_i + 1 \nz_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Given the free parameters  z_i d_i h_i l_i m_i, which are called as hidden variables, the remaining parameter a_i c_i k_i e_i f_i g_i can be calculated. ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Using the boundary conditions, we can write ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\na_i \ne_i\nendbmatrix = \n\nbeginbmatrix\nx_i \nx_i + 1\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\na_i \ne_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nx_i  \nx_i + 1\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Similarly, we have ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\nc_i \nf_i\nendbmatrix = \n\nbeginbmatrix\ny_i - d_i y_0 - h_i z_0  \ny_i + 1 - d_i y_N - h_i z_N\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\nc_i \nf_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\ny_i - d_i y_0 - h_i z_0 \ny_i + 1 - d_i y_N - h_i z_N\nendbmatrix","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"Again, ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix \nx_0   1  \nx_N   1\nendbmatrix\n\nbeginbmatrix\nk_i \ng_i\nendbmatrix = \n\nbeginbmatrix\nz_i - d_i y_0 - h_i z_0  \nz_i + 1 - d_i y_N - h_i z_N\nendbmatrix\n\nquad i = 0 ldots N - 1","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"which implies ","category":"page"},{"location":"manual/interpolation/one_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\nk_i \ng_i\nendbmatrix = \n\ndfrac1x_0 -  x_N\n\nbeginbmatrix \n1   -1  \n-x_N   x_0  \nendbmatrix\nbeginbmatrix\nz_i - d_i y_0 - h_i z_0 \nz_i + 1 - d_i y_N - h_i z_N\nendbmatrix","category":"page"},{"location":"#FractalTools.jl","page":"API","title":"FractalTools.jl","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"Modules = [FractalTools]","category":"page"},{"location":"#FractalTools.Attractor","page":"API","title":"FractalTools.Attractor","text":"struct Attractor{T, S, R}\n\nAttractor of IFS type \n\nFields\n\nifs::Any\nIFS of Attractor\nalg::Any\nType of algorithm to be used to compute attractor(Options are DetAlg and RandAlg\ninitset::Any\nInitial set of attractor\nset::Any\nSet of the attractor\nnumiter::Int64\nNumber of iterations\nparallel::Bool\nSequential or parallel\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.DetAlg","page":"API","title":"FractalTools.DetAlg","text":"struct DetAlg\n\nA type signifying that deterministic algorithm is used when calculating the attractor of and IFS.\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.IFS","page":"API","title":"FractalTools.IFS","text":"struct IFS{T1, T2}\n\nIterated fucntion sytem (IFS) \n\nFields\n\nws::Any\nprobs::Any\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.Interpolant","page":"API","title":"FractalTools.Interpolant","text":"struct Interpolant{T1<:IFS, T2<:(AbstractArray{var\"#s29\",1} where var\"#s29\"<:Interval), T3} <: AbstractInterpolant\n\nOne dimensional fractal interpolant \n\nFields\n\nifs::IFS\nintervals::AbstractArray{var\"#s29\",1} where var\"#s29\"<:Interval\nitp::Any\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.Interval","page":"API","title":"FractalTools.Interval","text":"struct Interval{T<:Real}\n\nReal closed interval\n\nFields\n\nlb::Real\nub::Real\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.RandAlg","page":"API","title":"FractalTools.RandAlg","text":"struct RandAlg\n\nA type signifying that random algorithm is used when calculating the attractor of and IFS.\n\n\n\n\n\n","category":"type"},{"location":"#FractalTools.Transformation","page":"API","title":"FractalTools.Transformation","text":"struct Transformation{T1, T2}\n\nAffine transformation \n\nFields\n\nA::Any\nb::Any\n\n\n\n\n\n","category":"type"},{"location":"#Base.:∈-Tuple{Real,Interval}","page":"API","title":"Base.:∈","text":"∈(x, I)\n\n\nReturns true if x is in I.\n\nExample\n\njulia> I = Interval(1, 2)\nInterval{Int64}(1, 2)\n\njulia> 1.5 ∈ Interval(1, 2)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.Fern-Tuple{}","page":"API","title":"FractalTools.Fern","text":"Fern()\n\nConstructs and IFS for a fern.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.Sierpinski-Tuple{}","page":"API","title":"FractalTools.Sierpinski","text":"Sierpinski()\n\nConctructs an IFS for Sierpinski triangle.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.Square-Tuple{}","page":"API","title":"FractalTools.Square","text":"Square()\n\nConstructs and IFS for a sqaure.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.Tree-Tuple{}","page":"API","title":"FractalTools.Tree","text":"Tree()\n\nConstructs and IFS for a fractal tree.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.attractor-Tuple{Any,Any}","page":"API","title":"FractalTools.attractor","text":"attractor(ifs, initset; alg, kwargs...)\n\n\nComputes the attractor of ifs. If alg is of type DetAlg, the deterministic algorithm is used. If alg is of type RandAlg, random algorithm is used. kwargs may include\n\nnumiter::Int : Number of iterations to used to calcuate the attractor (defaults to 10)\nnumtransient::Int : Number of transient iterations to used to calcuate a transient set. When the transient set is constructed, the computation of attractor is continued with distributed computation if alg is RandAlg and parallel is true. (defaults to 10)\nparallel::Bool: If  true, the attractor is computed using distrbuted computation. (defaults to false)\nplacedependent::Bool : If true, place dependent attractor is computed if α and β is given accordingly. (default to false)\nα::AbstractVector : Place-dependent probility coefficient(defaults to nothing)\nβ::AbstractVector : Place-dependent probility coefficient. (default to nothing)\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.boundarypoints-Tuple{GeometryBasics.Point,GeometryBasics.Point,GeometryBasics.Point}","page":"API","title":"FractalTools.boundarypoints","text":"boundarypoints(p1, p2, p3; numpoints)\n\n\nReturns boundary points of on the edges of the triangle p1, p2, p3. numpoints is the number of points on the edges of the triangle.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.box-Tuple{GeometryBasics.Point,GeometryBasics.Point,GeometryBasics.Point}","page":"API","title":"FractalTools.box","text":"box(p1, p2, p3)\n\n\nReturns the matrix A and a vector b such that for any point p the transformation T(p) = A * p + b moves p into the bounding box of the triangule formed by the points p1, p2, p3.  \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients-Tuple{Any,Any,Any}","page":"API","title":"FractalTools.coefficients","text":"coefficients(x, y, d)\n\n\nReturns the coefficients of the transformations of the ifs of the fractal interpolation.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients-Tuple{PyCall.PyObject,AbstractArray{var\"#s55\",1} where var\"#s55\"<:Real,AbstractArray{var\"#s54\",1} where var\"#s54\"<:Real,Real,Real,Real,Real}","page":"API","title":"FractalTools.coefficients","text":"coefficients(mesh, z, α, region_type)\n\nComputes coefficients of the iterated function system given the two dimensional interpolation domain mesh and corresponding z with the vertical scaling factor α.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients-Tuple{PyCall.PyObject,AbstractArray{var\"#s62\",1} where var\"#s62\"<:Real,Real}","page":"API","title":"FractalTools.coefficients","text":"coefficients(mesh, z, α, region_type)\n\nComputes coefficients of the iterated function system given the two dimensional interpolation domain mesh and corresponding z with the vertical scaling factor α.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients2equationsystem-Tuple{Any,Any}","page":"API","title":"FractalTools.coefficients2equationsystem","text":"coefficients2equationsystem(coeffs, α)\n\nReturns the matrix, vector corresponding to the IFS given by coeffs and the vertical scaling factors α.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients2transforms-Tuple{AbstractArray{var\"#s68\",2} where var\"#s68\"<:Real,Any}","page":"API","title":"FractalTools.coefficients2transforms","text":"coefficients2transforms(coeffs, α)\n\nConverts to equation system given with coeffs and vertical scaling factors α7 into transformations of the IFS.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.coefficients2transforms-Tuple{AbstractArray{var\"#s68\",3} where var\"#s68\"<:Real,Any}","page":"API","title":"FractalTools.coefficients2transforms","text":"coefficients2transforms(coeffs, α)\n\nConverts to equation system given with coeffs and vertical scaling factors α7 into transformations of the IFS.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.contfactor-Tuple{IFS}","page":"API","title":"FractalTools.contfactor","text":"contfactor(ifs::IFS)\n\nReturns the contraction factor of IFS.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.contfactor-Tuple{Transformation}","page":"API","title":"FractalTools.contfactor","text":"contfactor(w)\n\n\nReturns contraction factor of w. Contraction factor is computed as the norm of w.A.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.contraction_factors-Tuple{Any,Any}","page":"API","title":"FractalTools.contraction_factors","text":"contraction_factors(coeffs, α)\n\nComputes contraction factors of the affine transformations of the ifs given with coeffs and the verticaling factors α. Contraction factors are calculated to be the eigenvalues of the coeffs.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.detalg-Tuple{Any,Any}","page":"API","title":"FractalTools.detalg","text":"detalg(ifs, initset; numiter, parallel)\n\n\nComputes the attractor of ifs with deterministic algorithm.numiter is number of iterations. (Defaults to 10). If parallel is true, attractor is computed via parallel computation.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.dimension-Tuple{IFS}","page":"API","title":"FractalTools.dimension","text":"dimension(ifs::IFS)\n\nReturns dimension of ifs.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.dimension-Tuple{Transformation}","page":"API","title":"FractalTools.dimension","text":"dimension(w)\n\n\nReturns dimension of w.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.disperse-Tuple{Any,Any}","page":"API","title":"FractalTools.disperse","text":"disperse(trig, npoints)\n\n\nReturns a vector of random points that are dispersed into trig. npoints is the number of points to be dispersed. \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.fif-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.fif","text":"fif(x, y; d, f0, niter)\n\n\nInterpolates the data pairs (xi, yi) for xi ∈ x and yi ∈ y. f0 is the initial function and niter is the number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.find_apex-Tuple{Any}","page":"API","title":"FractalTools.find_apex","text":"find_apex(mesh, coordinates=false)\n\nFinds the indices of the apex points of the mesh. If coordinates is true, the coordinates of the apex points are returned.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.find_region-Tuple{Any,Any,Any}","page":"API","title":"FractalTools.find_region","text":"find_region(regions, px, py)\n\nFinds triangular region in regions to which the point px belongs.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.findouttriangle-Tuple{Any}","page":"API","title":"FractalTools.findouttriangle","text":"findouttriangle(pnts3d)\n\n\nReturns the bounding triangle of the points pnts3d.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.fis-Tuple{AbstractArray{PyCall.PyObject,1},AbstractArray{var\"#s63\",1} where var\"#s63\"<:(AbstractArray{T,1} where T)}","page":"API","title":"FractalTools.fis","text":"fis(mesh, z, α=0.1, func0=(xi,yi)->0., num_iter=15, get_coeffs=false)\n\nFractal interpolaton surface for the interpolaton domain given with mesh and associated z with the vertical scling factors α, initial function func0, number of iterations num_iter. If get_coeffs is true, coefficients of the IFS orresponding to dataset mesh and z are returned.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.fis-Tuple{PyCall.PyObject,AbstractArray{var\"#s63\",1} where var\"#s63\"<:Real}","page":"API","title":"FractalTools.fis","text":"fis(mesh, z, α=0.025, func0=(xi,yi)->0., num_iter=15, get_coeffs=false)\n\nFractal interpolaton surface for the interpolaton domain given with mesh and associated z with the vertical scling factors α, initial function func0, number of iterations num_iter. If get_coeffs is true, coefficients of the IFS corresponding to dataset mesh and z are returned.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.getdata-Tuple{Any,GeometryBasics.Ngon{Dim,T,3,GeometryBasics.Point{Dim,T}} where T where Dim,Int64}","page":"API","title":"FractalTools.getdata","text":"getdata(f, trig, npts)\n\n\nReturns a three-dimensional interpolation data pnts. pnts is a vector of three-dimensional points pi = Point(xi, yi, zi) where xi and yi are from the dispersed points and zi = f(xi, yi). \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.gethiddenifs-NTuple{7,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.gethiddenifs","text":"gethiddenifs(x, y, z, d, h, l, m)\n\n\nReturns the IFS corresponding to interpolation data x, y. d is the scaling parameters. See the notes on docs\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.getifs-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.getifs","text":"getifs(x, y, d)\n\n\nReturns the IFS corresponding to interpolation data x, y. d is the scaling parameters.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.getintervals-Tuple{AbstractArray{T,1} where T}","page":"API","title":"FractalTools.getintervals","text":"getintervals(x)\n\n\nReturns the just-touching intervals \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.getpoint-Tuple{GeometryBasics.Ngon{Dim,T,3,GeometryBasics.Point{Dim,T}} where T where Dim}","page":"API","title":"FractalTools.getpoint","text":"getpoint(tri; maxiter)\n\n\nReturns a random valid point in tri. maxiters is the number of iteration while finding the point. \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.gettransform","page":"API","title":"FractalTools.gettransform","text":"gettransform(outtrig, intrig)\ngettransform(outtrig, intrig, α)\n\n\nReturns a named tuple of A andbsuch thatL(x) = A * x + bmapsouttrigtointrig`. \n\n\n\n\n\n","category":"function"},{"location":"#FractalTools.hiddenfif-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.hiddenfif","text":"hiddenfif(x, y, z; d, h, l, m, f0, niter)\n\n\nInterpolates the data pairs (xi, yi) for xi ∈ x and yi ∈ y. f0 is the initial function and niter is the number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.hiddenfis-Tuple{AbstractArray{PyCall.PyObject,1},AbstractArray{var\"#s56\",1} where var\"#s56\"<:(AbstractArray{T,1} where T),AbstractArray{var\"#s55\",1} where var\"#s55\"<:(AbstractArray{T,1} where T)}","page":"API","title":"FractalTools.hiddenfis","text":"hiddenfis(mesh, z, α=0.1, func0=(xi,yi)->0., num_iter=15, get_coeffs=false)\n\nFractal interpolaton surface for the interpolaton domain given with mesh and associated z with the vertical scling factors α, initial function func0, number of iterations num_iter. If get_coeffs is true, coefficients of the IFS orresponding to dataset mesh and z are returned.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.hiddenfis-Tuple{PyCall.PyObject,AbstractArray{var\"#s62\",1} where var\"#s62\"<:Real,AbstractArray{var\"#s61\",1} where var\"#s61\"<:Real}","page":"API","title":"FractalTools.hiddenfis","text":"hiddenfis(mesh, z, α=0.025, func0=(xi,yi)->0., num_iter=15, get_coeffs=false)\n\nFractal interpolaton surface for the interpolaton domain given with mesh and associated z with the vertical scling factors α, initial function func0, number of iterations num_iter. If get_coeffs is true, coefficients of the IFS corresponding to dataset mesh and z are returned.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.integrate-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.integrate","text":"integrate(x, y, z; d, h, l, m)\n\n\nI = ∫f(x)dx\n\nNumerically integrates the interpolation function for interpolation points (x, y). x is a domain point, y is the range point. d is the vertical scaling factor (0., 1.)\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.integrate-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T,Function}","page":"API","title":"FractalTools.integrate","text":"integrate(x::AbstractVector{T}, y::AbstractVector{T}, g::Function;\n    d=0.001) where {T<:Real}\n\nComputes the numerical integration I = g(u)f(u)du where f is the interpolation function for the points (x, y). g is any single variable function. d is the vertical scaling factor.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.integrate-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.integrate","text":"integrate(x, y; d)\n\n\nI = ∫f(x)dx\n\nNumerically integrates the interpolation function for interpolation points (x, y). x is a domain point, y is the range point. d is the vertical scaling factor (0., 1.)\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.integrate-Tuple{PyCall.PyObject,AbstractArray{T,1} where T}","page":"API","title":"FractalTools.integrate","text":"integrate(mesh::PyCall.PyObject, z::AbstractVector; α::Real=0.001, region_type::String=\"triangular\")\n\nI = ∫f(x,y)dxdy\n\nNumerically integrates interpolation function for interpolation points (mesh, zi) where mesh is domain, and zi is the corresponding point in the range. α is vertical scaling factor between (0., 1.). region_type determines the geometry of the regions. triangular and polygonal are the available geometrical regions.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.interpolate-Tuple{Any}","page":"API","title":"FractalTools.interpolate","text":"interpolate(pnts3d; α, f0, maxiters, gettransforms)\n\n\nReturns a fractal surface interpolation function that interpolates pnts3d.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.isvalidpoint-Tuple{GeometryBasics.Point,GeometryBasics.Ngon{Dim,T,3,GeometryBasics.Point{Dim,T}} where T where Dim}","page":"API","title":"FractalTools.isvalidpoint","text":"\"\n\nisvalidpoint(pnt, trig)\n\n\nReturns true if pnt is in trig. \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.linepoint-Tuple{GeometryBasics.Point,GeometryBasics.Point}","page":"API","title":"FractalTools.linepoint","text":"linepoint(p1, p2; numpoints)\n\n\nReturns the points of the edge whose end points are p1 and p2. numpoints is the number of points. \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.proj_onto_line","page":"API","title":"FractalTools.proj_onto_line","text":"proj_onto_line(px, p1, p2, minimizer::Bool=true)\n\nProjects the point px onto the line passing the points p1 ans p2. If back_project is true, minimizer of the disatance of the point to the line is returned instead of the projection point.\n\n\n\n\n\n","category":"function"},{"location":"#FractalTools.proj_onto_triangle","page":"API","title":"FractalTools.proj_onto_triangle","text":"proj_onto_triangle(px, triangle, all)\n\nProjects to the poits px on the nearest boundary of the triangle triangle. If all is true, then the projections of the point px is all three edges of the triangle is returned.\n\n\n\n\n\n","category":"function"},{"location":"#FractalTools.project-Tuple{Any}","page":"API","title":"FractalTools.project","text":"project(pnts3d)\n\n\nReturns the two-dimensional projections of the three-dimensional points pnts3d\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.randalg-Tuple{Any,Any}","page":"API","title":"FractalTools.randalg","text":"randalg(ifs, initset; numiter, numtransient, parallel, placedependent, α, β)\n\n\nComputes the attractor of ifs with random algorithm.numiter is number of iterations. (Defaults to 100). numtransient is the number of transient iterations. If parallel is true, attractor is computed via parallel computation. If placedependent is true, the probabilties of the ifs are dependent on the coordinates x. This dependency p(x) is given via the parameters α and β where p(x) = α x + β.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.triangulate-Tuple{Any}","page":"API","title":"FractalTools.triangulate","text":"triangulate(pnts3d)\n\n\nReturns a tuple of a Delaunay tessellation and a correspoding three dimensional mesh. \n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.wrap-Tuple{Any}","page":"API","title":"FractalTools.wrap","text":"wrap()\n\n\nFunctional that takes initiali function func and returns a wrapped function.\n\n\n\n\n\n","category":"method"},{"location":"#FractalTools.wraphidden-Tuple{Any}","page":"API","title":"FractalTools.wraphidden","text":"wraphidden()\n\n\nFunctional that takes initiali function func and returns a wrapped function.\n\n\n\n\n\n","category":"method"},{"location":"manual/integration/two_dimensional_hidden_integration/#Two-Dimensional-Fractal-Integration","page":"-","title":"Two Dimensional Fractal Integration","text":"","category":"section"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Consider the data points (x_i y_i)  i = 1 2 ldots N triangulized over a triangular domain Omega subset mathbbR^n. Associated with the data point (xi yi) we consider real values z_i in mathbbR  i = 1 2 ldots N. In addition, we consider additional real data values t_i  i = 1 2 ldots N. Our aim is to find and interpolation function, i.e., interpolant f Omega mapsto mathbbR^2 such that (z_i t_i) = f(x_i y_i)  i = 1 2 ldots N.","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Consider the iterated function system mathcalI = Omega times mathbbR^n w_n n = 1 2 ldots K where ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"w_n(x y z t) = \nbeginbmatrix \n    alpha_1^n  alpha_2^n  0  0  \n    alpha_3^n  alpha_4^n  0  0  \n    alpha_5^n  alpha_6^n  alpha_7^n  alpha_8^n  \n    alpha_9^n  alpha_10^n  alpha_11^n  alpha_12^n \nendbmatrix\nbeginbmatrix\n    x  y  z  t \nendbmatrix\n+ \nbeginbmatrix \n    beta_1^n \n    beta_2^n \n    beta_3^n \n    beta_4^n\nendbmatrix","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"We can divide the transformation w_n  n = 1 2 ldots K as follows,","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"w_n(x y z t) = (L_n(x y) F_n(x y z t))","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"where ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"L_n(x y) = \nbeginbmatrix \n    alpha_1^n  alpha_2^n  \n    alpha_3^n  alpha_4^n \nendbmatrix\nbeginbmatrix\n    x  y \nendbmatrix\n+ \nbeginbmatrix \n    beta_1^n \n    beta_2^n \nendbmatrix","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"and ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"F_n(x y z t) = \nbeginbmatrix \n    alpha_5^n  alpha_6^n  alpha_7^n alpha_8^n \n    alpha_9^n  alpha_10^n  alpha_11^n alpha_12^n \nendbmatrix\nbeginbmatrix\n    x  y  z  t \nendbmatrix\n+ \nbeginbmatrix\n    beta_n^3  beta_n^4\nendbmatrix","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Given the free parameters alpha_7^n alpha_8^n alpha_10^n alpha_12^n  n = 1 ldots K, the remaining coefficients of the transformations w_n  n = 1 2 ldots K can be found from the boundary conditions, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"L_n(tildex_j tildey_j) = (x_k y_k) quad k = 1 2 ldots K quad j = 1 2 3","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"where the (tildex_j tildey_j)  j = 1 2 3 are the set of the vertex points of the interpolation Omega and (x_j y_j)  j = 1 2 3 are the set of vertex points of the triangle Omega_k  k = 1 2 ldots K where K is the number of triangles in Omega. Here the free variables t_n  n = 1 2 ldots N and the alpha_7^n alpha_8^n alpha_10^n alpha_12^n are called the \\emph{hidden variables.}","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Then the graph of the interpolant f is the attractor of the IFS mathcalI. Furthermore, the interpolant f is the fixed of a mapping Tf mathbbF mapsto mathbbF where mathbbF is the set of continuous functions g Omega mapsto mathbbR^2 such that ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Tf(x y) = F_n(L_n^-1(x u) f(L_n^-1(x u)))","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"The definite integral of the interpolant f over the interpolation domain Omega can be computed by using just the transformation coefficients. To this end, let us start, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"I = \nint_Omega f(x y) dx dy = \nbeginbmatrix\n    I_1  \n    I_2 \nendbmatrix","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Since f is the fixed point of the transformation Tf, then f(xy) = Tf(x y), then ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"I = \nint_Omega Tf(x y) dx dy = sum_n=1^K int_Omega^n F_n(L_n^-1(x y) f(L_n^-1(x y))) dx dy","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Using the transformation (x y) = L_n(tildex tildey), we can write ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nI = \nbeginbmatrix \n    I_1  \n    I_2 \nendbmatrix\nint_Omega F_n(tildex tildey f(tildex tildey)) J_L_n dtildex dtildey  \n= \nbeginbmatrix\nint_Omega (alpha_5^n tildex + alpha_6^n tildey + alpha_7^n f_1(tildex tildey) + alpha_8^n f_2(tildex tildey) + beta_3^n) dtildex dtildey \nint_Omega (alpha_9^n tildex + alpha_10^n tildey + alpha_11^n f_1(tildex tildey) + alpha_12^n f_2(tildex tildey) + beta_4^n) dtildex dtildey \nendbmatrix  \n= \nbeginbmatrix \nLambda_1 + W_11 I_1 + W_12 I_2  \nLambda_2 + W_12 I_1 + W_22 I_2  \nendbmatrix\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"where ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nLambda_1 = sum_n = 1^K int_Omega (alpha_5^n tildex + alpha_6^n tildey + beta_3^n) J_L_n dtildex dtildey  \nLambda_2 = sum_n = 1^K int_Omega (alpha_9^n tildex + alpha_10^n tildey + beta_4^n) J_L_n dtildex dtildey   \nW_11 = sum_n = 1^K alpha_7^n J_L_n   \nW_12 = sum_n = 1^K alpha_8^n J_L_n   \nW_21 = sum_n = 1^K alpha_11^n J_L_n   \nW_12 = sum_n = 1^K alpha_12^n J_L_n \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Hence we can write, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nbeginbmatrix \n1 - W_11  -W_12  \n-W_12  1 - W_22 \nendbmatrix \nbeginbmatrix\n    I_1  \n    I_2\nendbmatrix \n= \nbeginbmatrix\nLambda_1  \nLambda_2\nendbmatrix  \nbeginbmatrix \nGamma_11  Gamma_12  \nGamma_21  Gamma_22  \nendbmatrix\nbeginbmatrix \nI_1  I_2\nendbmatrix\n= \nbeginbmatrix \nLambda_1  \nLambda_2\nendbmatrix\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"By solving this system of equations,","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned\nI_1 = dfracLambda_1 Gamma_22 - Lambda_2 Gamma_12Gamma_11 Gamma_22 - Gamma_12 Gamma_21  \nI_2 = dfracLambda_2 Gamma_11 - Lambda_1 Gamma_21Gamma_11 Gamma_22 - Gamma_12 Gamma_21 \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"We have, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned \nLambda_1 = int_Omega (alpha_5^n tildex + alpha_6^n tildey + beta_3^n) J_L_n dtildex dtildey  \nLambda_2 = int_Omega (alpha_9^n tildex + alpha_10^n tildey + beta_4^n) J_L_n dtildex dtildey \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"These integrals are over the triangular integration domain Omega. To ease the evaluation of these integral, we can transform the integral over a triangular domain Theta consisting of the vertex points (00) (0 1) (1 0) using a transformation of the form ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"T(barx bary) = \nbeginbmatrix \n    tildex  tildey \nendbmatrix = \nbeginbmatrix\na_11  a_12  \na_21  a_22 \nendbmatrix\nbeginbmatrix \n    barx  bary \nendbmatrix\n+ \nbeginbmatrix \n    b_1  b_2 \nendbmatrix","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Then we have, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned \nLambda_11 \n    = sum_n = 1^K  int_Delta left( alpha_5^n (a_1 barx + a_2 bary + b_1) + alpha_6^n (a_3 barx + a_4 bary + b_2) + beta_3^n  right) J_L_n J_T dbarx dbary\nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Since, ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned \nint_Delta (a_1 barx + a_2 bary + b_1) dbar dbarx \n    = int_0^1 int_0^-barx + 1  (a_1 barx + a_2 bary + b_1) dbar dbarx   \n    = int_0^1 left( a_1 barx (-barx + 1) + a_2 dfrac(-barx + 1)^22 + b_1(-barx + 1) right)dbarx \n    = dfrac16 (a_1 + a_2 + 3 b_1) \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"we can write Lambda_1","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned \nLambda_1 = J_T left( \n    dfraca_1 + a_2 + 3 b_16 sum_n = 1^K alpha_5^n J_L_n + \n    dfraca_3 + a_4 + 3 b_26 sum_n = 1^K alpha_6^n J_L_n + \n    sum_n = 1^K beta_3^n J_L_n  \n    right) \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"and ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"beginaligned \nLambda_2 = J_T left( \n    dfraca_1 + a_2 + 3 b_16 sum_n = 1^K alpha_9^n J_L_n + \n    dfraca_3 + a_4 + 3 b_26 sum_n = 1^K alpha_10^n J_L_n + \n    sum_n = 1^K beta_4^n J_L_n  \n    right) \nendaligned","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Lastly, we have ","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"    J_L_n = alpha_1^n alpha_4^n - alpha_2^n alpha_3^n","category":"page"},{"location":"manual/integration/two_dimensional_hidden_integration/","page":"-","title":"-","text":"Thus, the definite integral of the interpolant f can be evaluated using the just the coefficients of the transformations. ","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/#Two-Dimensional-Fractal-Interpolation","page":"-","title":"Two Dimensional Fractal Interpolation","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"To generalize the concepts given in the previous section for FIFs to the FISs, consider that Omega = tildeP_j = (tildex_j tildey_j)  j = 1 2 3 is a triangular domain in the plane as shown in Fig. \\ref{fig: triangulation}. Let P = P_i = (x_i y_i)  i = 1 ldots N be given points in the plane scattered over Omega containing the points tildeP_j  j = 1 2 3. A triangulation T(Omega) of Omega over the points P is given with the set, \\begin{equation} T(\\Omega) = { \\Omega^i = {Pj^i} : Pj^i \\in P, \\; j = 1, 2, 3, \\;  i  = 1, \\ldots, K } \\label{eq: triangulation} \\end{equation} Note that T(Omega) consists of non-degenerate triangles such that Omega^i cap Omega^j = emptyset  i neq j and Omega = cup_i  = 1^K Omega^i.","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"<center>\n    <img src=\"../../assests/triangulation.svg\" alt=\"model\" width=\"30%\"/>\n</center>","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Consider that each P_i = (x_i y_i) in P is associated with z_i in mathbbR. An interpolation function–also called interpolant, corresponding to the data set (x_i y_i z_i)  i = 1 ldots N  is a continuous function f Omega mapsto mathbbR such that f(x_i y_i) = z_i. The answer to the problem of constructing the interpolation function f is in two folds:","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Construction of an IFS mathcalI = Omega times mathbbR w_i  i = 1 ldots K  whose attractor is the graphG of the function f satisfying the interpolation points, i.e.f(x_i y_i) = z_i  i = 1 ldots N. \nConstruction of a contraction mapping M mathcalF mapstomathcalF where mathcalF = tildef in mathcalC(Omega)  tildef(tildex_j tildey_j) = tildez_j  such that the fixed point f of the mapping M satisfies the interpolation points, i.e. f(x_i y_i) = z_i  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/#Construction-of-the-IFS-\\mathcal{I}","page":"-","title":"Construction of the IFS mathcalI","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Addressing to the first step, we put forward the following IFS I =  Omega times mathbbR w_i  i = 1 ldots K  with affine transformations w_i,","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"    beginaligned\n     w_i(x y z) = (L_i(x y) F_i(x y z)) \n    =beginbmatrix\n    alpha_1^i  alpha_2^i  0 \n    alpha_3^i  alpha_4^i  0 \n    alpha_5^i  alpha_6^i  alpha_7^i\n    endbmatrix\n    beginbmatrix\n    x  y  z\n    endbmatrix + beginbmatrix\n    beta_1^i  beta_2^i  beta_3^i\n    endbmatrix \n      i = 1 ldots K\n\n    endaligned\n","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"where L_i  Omega mapsto Omega^i","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"    L_i(x y) = beginbmatrix\n    alpha_1^i  alpha_2^i  alpha_3^i  alpha_4^i\n    endbmatrix beginbmatrix\n    x  y\n    endbmatrix + beginbmatrix\n    beta_1^i  beta_2^i\n    endbmatrix","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"are contraction mappings for the z axis satisfying the boundary conditions,","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"F_i(tildex_j tildey_j tildez_j) = z_j^i  j = 1 2 3","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"where alpha_7^i are arbitrary contractivity factors satisfying alpha_7^i  1  i = 1 ldots K, also called as vertical scaling factors.","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Given the vertical scaling factors alpha_7^i  i = 1 ldots K, the coefficients alpha_k^i  k = 1  ldots 6  i = 1 ldots K can be found using the boundary conditions in (\\ref{eq: plane boundary conditions}) and (\\ref{eq: z values boundary conditons}) which results in following system of equations,","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"beginaligned\nalpha_1^i tildex_j + alpha_2^i tildey_j + beta_1^i = x_j^i \nalpha_3^i tildex_j + alpha_4^i tildey_j + beta_2^i = y_j^i \nalpha_5^i tildex_j + alpha_6^i tildey_j + beta_3^i = z_j^i - alpha_7^i tildez_j \nendaligned","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"for i = 1 ldots K  j = 1 2 3. This system can be rewritten in block diagonal matrix equation system,","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"beginbmatrix\nbmP  bm0  ldots  bm0 \nbm0  bmP  ldots  bm0 \nvdots  vdots  ddots  vdots \nbm0  bm0  ldots  bmP \nendbmatrix\nbeginbmatrix\nbmr_1  bmr_2  bmr_3\nendbmatrix = beginbmatrix\nbmc_1  bmc_2  bmc_3\nendbmatrix","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"where","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"beginaligned\nbmP = \nbeginbmatrix\ntildex_1  tildey_1  1  \ntildex_2  tildey_2  1  \ntildex_3  tildey_3  1  \nendbmatrix\nbmr_1 = bmr_1^1 ldots bmr_1^i ldots bmr_1^K  bmr_1^i = alpha_1^i alpha_2^i beta_1^i \nbmr_2 = bmr_2^1 ldots bmr_2^i ldots bmr_2^K  bmr_2^i = alpha_3^i alpha_4^i beta_2^i  \nbmr_3 = bmr_3^1 ldots bmr_3^i ldots bmr_3^K  bmr_3^i = alpha_5^i alpha_6^i beta_3^i \nbmc_1 = bmc_1^1 ldots bmc_1^i ldots bmc_1^K  bmc_1^i = x_1^i x_2^i x_3^i \nbmc_2 = bmc_2^1 ldots bmc_2^i ldots bmc_2^K  bmc_2^i = y_1^i y_2^i y_3^i \nbmc_3 = bmc_3^1 ldots bmc_3^i ldots bmc_3^K  bmc_3^i = z_1^i z_2^i z_3^i - alpha_7^i tildez_1^i tildez_2^i tildez_3^i\nendaligned","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"We  have uncoupled system of equations,","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"bmP bmr_j^i = bmc_j^i  j = 1 2 3  i = 1 ldots N","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Since the points tildeP_j  j = 1 2 3 forms a non-degenerate triangular region Omega, bmP^-1 exists and can be solved for the coefficients of the IFS mathcalI which gives, ","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"bmr_j^i = bmP^-1 bmc_j^i  j = 1 2 3  i = 1 ldots K","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/#Construction-of-the-mapping-M","page":"-","title":"Construction of the mapping M","text":"","category":"section"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"Inspired by the reasoning given in Theorem 1, we propose the following conjecture for the second part of the problem.","category":"page"},{"location":"manual/interpolation/two_dimensional_interpolation/","page":"-","title":"-","text":"note: Note\nConsider the transformation L shown in the figure below where Omega_n and Omega subset mathbbR^2 and the IFS mathcalI in (\\ref{eq: IFS}), let (mathcalF d) be a complete metric space such that\t","category":"page"}]
}
